"use strict";(self.webpackChunkquality_code=self.webpackChunkquality_code||[]).push([[731],{8267:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=t(4848),r=t(8453);const i={},l="Types",c={id:"types",title:"Types",description:"Strict types ensures quality",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/quality-code/docs/types",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/quality-code/docs/tools"},next:{title:"Warnings",permalink:"/quality-code/docs/warnings"}},a={},d=[{value:"Strict types ensures quality",id:"strict-types-ensures-quality",level:2},{value:"Types saves times",id:"types-saves-times",level:2},{value:"Repeated prefixes",id:"repeated-prefixes",level:2},{value:"Deterministic types",id:"deterministic-types",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"types",children:"Types"}),"\n",(0,n.jsx)(s.h2,{id:"strict-types-ensures-quality",children:"Strict types ensures quality"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"I\u2019m strict about types because:"})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"\u2705 Types help us code faster."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Types help us read faster."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Types help us catch mistakes earlier."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Types help us assure the app works."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://twitter.com/housecor/status/1751605094309642753",children:"Source : Cory House"})}),"\n",(0,n.jsx)(s.h2,{id:"types-saves-times",children:"Types saves times"}),"\n",(0,n.jsx)(s.p,{children:"In TypeScript, declaring types saves me more time than it costs me:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"\u2705 Speeds up my reading."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Catches my errors earlier."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Clarifies my mental model."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Gives me robust, reliable autocomplete."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Avoids me spending time checking docs."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Helps me understand my own code later."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Reduces the number of tests I need to write."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Helps my editor reliably auto-import so I don't have to write imports myself."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Gives me the confidence and safety to be able to make large-scale, type-safe refactors."}),"\n",(0,n.jsx)(s.li,{children:"\u2705 Helps other people understand my code, which speeds up code reviews, reduces the risk of bugs, and accelerates future code changes."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"So types don\u2019t just help ensure quality. They save me time"}),"\n",(0,n.jsx)(s.h2,{id:"repeated-prefixes",children:"Repeated prefixes"}),"\n",(0,n.jsx)(s.p,{children:"Group the related fields under an object."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"type Driver = {\n  id: string;\n  // \u2757This infers any combination of these 3 fields is valid.\n  // \u2757The property name are repetitive.\n  // \u2757The related fields aren't clearly grouped.\n  diversLicenseNumber?: string;\n  driversLicenseState?: string;\n  driversLicenseExpiration?: date;\n};\n\ntype Driver = {\n  id: string;\n  // \u2705 Now driver's license is still optional, but all fields are required if it exists.\n  // \u2705 The property name aren't repetitive.\n  // \u2705 The related fields are clearly grouped under a well-named object.\n  diversLicense?: {\n    number: string;\n    state: string;\n    expiration: date;\n  };\n};\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://twitter.com/housecor/status/1787637488485380347/photo/1",children:"Source: Cory House"})}),"\n",(0,n.jsx)(s.h2,{id:"deterministic-types",children:"Deterministic types"}),"\n",(0,n.jsx)(s.p,{children:"Avoid"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"type Response = {\n  status: 'success' | 'error';\n  data?: string;\n  error?: string;\n};\n"})}),"\n",(0,n.jsx)(s.p,{children:"\u2705 Prefer"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"type Response =\n  | { status: 'success'; data: string }\n  | { status: 'error'; error: string };\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This is because the type system can infer the type of the ",(0,n.jsx)(s.code,{children:"data"})," and ",(0,n.jsx)(s.code,{children:"error"})," fields from the value of ",(0,n.jsx)(s.code,{children:"status"}),"."]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>c});var n=t(6540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);